#include "3rdparty/eiquadprog_test.hpp"
#include <limits>
#include <iostream>

#include <chrono>

/*
 * minimize 1/2 x^T G x + g0^T x
 * subject to CE0^T x + ce0 = 0
 * subject to CI0^T x + ci0 >= 0
 */

int main()
{
    std::chrono::time_point<std::chrono::system_clock> start = std::chrono::system_clock::now();
    Eigen::MatrixXd G(12, 12);
    G <<
12,0,0,0,0,0,0,0,0,0,0,0,
0,11,0,0,0,0,0,0,0,0,0,0,
0,0,10,0,0,0,0,0,0,0,0,0,
0,0,0,9,0,0,0,0,0,0,0,0,
0,0,0,0,8,0,0,0,0,0,0,0,
0,0,0,0,0,7,0,0,0,0,0,0,
0,0,0,0,0,0,6,0,0,0,0,0,
0,0,0,0,0,0,0,5,0,0,0,0,
0,0,0,0,0,0,0,0,4,0,0,0,
0,0,0,0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,0,0,0,2,0,
0,0,0,0,0,0,0,0,0,0,0,1;

    /*
    G <<
1,0,0,0,0,0,0,0,0,0,0,0,
0,1.1,0,0,0,0,0,0,0,0,0,0,
0,0,1.2,0,0,0,0,0,0,0,0,0,
0,0,0,1.3,0,0,0,0,0,0,0,0,
0,0,0,0,1.4,0,0,0,0,0,0,0,
0,0,0,0,0,1.5,0,0,0,0,0,0,
0,0,0,0,0,0,1.6,0,0,0,0,0,
0,0,0,0,0,0,0,1.7,0,0,0,0,
0,0,0,0,0,0,0,0,1.8,0,0,0,
0,0,0,0,0,0,0,0,0,1.9,0,0,
0,0,0,0,0,0,0,0,0,0,2,0,
0,0,0,0,0,0,0,0,0,0,0,2.1;
*/
    Eigen::VectorXd g0(12);
    g0 << 0,0,0,0,0,0,0,0,0,0,0,0;
    Eigen::MatrixXd CE0(3, 12);
    CE0 <<
3.40342e-06,0.0215941,0.309683,0.528402,0.137753,0.00256421,0,0,0,0,0,0,
-0.000729304,-0.79947,-4.13328,1.81394,2.97347,0.146063,0,0,0,0,0,0,
0,0,0.000260417,0.0617188,0.438021,0.438021,0.0617187,0.000260417,0,0,0,0;
    Eigen::VectorXd ce0(3);
    ce0 <<
-0,-0,-0.129184;
    Eigen::MatrixXd CI0(46, 12);
    CI0 <<
1,0,0,0,0,0,0,0,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,0,0,1,
-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,
-9,9,0,0,0,0,0,0,0,0,0,0,
0,-9,9,0,0,0,0,0,0,0,0,0,
0,0,-9,9,0,0,0,0,0,0,0,0,
0,0,0,-9,9,0,0,0,0,0,0,0,
0,0,0,0,-9,9,0,0,0,0,0,0,
0,0,0,0,0,-9,9,0,0,0,0,0,
0,0,0,0,0,0,-9,9,0,0,0,0,
0,0,0,0,0,0,0,-9,9,0,0,0,
0,0,0,0,0,0,0,0,-9,9,0,0,
0,0,0,0,0,0,0,0,0,-9,9,0,
0,0,0,0,0,0,0,0,0,0,-9,9,
9,-9,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,9,-9,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,9,-9,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,9,-9,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,9,-9,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,9,-9,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,9,-9,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,9,-9,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,9,-9,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,9,-9,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,9,-9;

    Eigen::VectorXd ci0(46);
    ci0 <<
0.147462,0.109559,0.247033,0.286287,0.730731,1.17518,1.35934,1.31123,1.27514,1.27784,1.2743,1.27316,
1.41809,1.45599,1.31852,1.27926,0.83482,0.390375,0.206213,0.25432,0.290411,0.287713,0.291249,0.292391,
3.65888,5.23726,4.35329,8,8,5.65746,3.56704,3.67518,4.02428,3.96818,3.98973,
4.34112,2.76274,3.64671,3.28213e-06,-1.43026e-06,2.34254,4.43296,4.32482,3.97572,4.03182,4.01027;
    Eigen::VectorXd ans(12);
    std::cout << std::endl;

    for (int i = 0; i <= 5; i++) {
        Eigen::VectorXd ci = ci0.segment(0, 12 + 12 + 11 + i);
        Eigen::MatrixXd CI = CI0.block(0, 0, 12 + 12 + 11 + i, 12);
        std::cout << "opt: " << Eigen::solve_quadprog(G, g0, CE0.transpose(), ce0, CI.transpose(), ci, ans) << std::endl;
        std::cout << ans.transpose() << std::endl;
        std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now() - start).count() << std::endl;
    Eigen::MatrixXd CI1(11, 12);
    CI1 <<
9,-9,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,9,-9,-0,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,9,-9,-0,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,9,-9,-0,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,9,-9,-0,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,9,-9,-0,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,9,-9,-0,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,9,-9,-0,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,9,-9,-0,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,9,-9,-0,
-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,9,-9;
    Eigen::VectorXd ci1(11);
ci1 << 3.65888,5.23726,4.35329,8,8,5.65746,3.56704,3.67518,4.02428,3.96818,3.98973;
    std::cout << "CI1*ans: " << (CI1 * ans).transpose() << std::endl;
    std::cout << "ci1: " << ci1.transpose() << std::endl;
    for (int i = 0; i < ci1.size(); i++) {
        if ((CI1 * ans)[i] > ci1[i] or (CI1 * ans)[i] < -ci1[i]) {
            std::cerr << "######################error" << std::endl;
        }
    }
    }

  return 0;
}
