#include "3rdparty/eiquadprog_test.hpp"
#include <limits>
#include <iostream>


/*
 * minimize 1/2 x^T G x + g0^T x
 * subject to CE^T x + ce0 = 0
 * subject to CI^T x + ci0 >= 0
 */
int main()
{
    Eigen::MatrixXd G(14, 14);
    G <<
    1.0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,1.1,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,1.2,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,1.3,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1.4,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1.5,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1.6,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1.7,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,1.8,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,1.9,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,2.0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,2.1,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,2.2,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,2.3;
    Eigen::VectorXd g0(14);
    g0 << 0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    Eigen::MatrixXd CE(3, 14);
    CE <<
    0.00760985,0.209222,0.549838,0.22422,0.00911082,1.57464e-11,0,0,0,0,0,0,0,0,
    -0.34872,-3.69458,-0.161948,3.80251,0.402738,3.9366e-08,0,0,0,0,0,0,0,0,
    0,0,0,0,0.000260417,0.0617188,0.438021,0.438021,0.0617188,0.000260417,0,0,0,0;
    Eigen::VectorXd ce0(3);
    ce0 << -0,-0,0.267428;
    Eigen::MatrixXd CI(54, 14);
    CI <<
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,1,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,1,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,1,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,1,
    -1,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,
    9,-9,0,0,0,0,0,0,0,0,0,0,0,0,
    0,9,-9,0,0,0,0,0,0,0,0,0,0,0,
    0,0,9,-9,0,0,0,0,0,0,0,0,0,0,
    0,0,0,9,-9,0,0,0,0,0,0,0,0,0,
    0,0,0,0,9,-9,0,0,0,0,0,0,0,0,
    0,0,0,0,0,9,-9,0,0,0,0,0,0,0,
    0,0,0,0,0,0,9,-9,0,0,0,0,0,0,
    0,0,0,0,0,0,0,9,-9,0,0,0,0,0,
    0,0,0,0,0,0,0,0,9,-9,0,0,0,0,
    0,0,0,0,0,0,0,0,0,9,-9,0,0,0,
    0,0,0,0,0,0,0,0,0,0,9,-9,0,0,
    0,0,0,0,0,0,0,0,0,0,0,9,-9,0,
    0,0,0,0,0,0,0,0,0,0,0,0,9,-9,
    -9,9,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-9,9,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-9,9,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-9,9,-0,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-9,9,-0,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-9,9,-0,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-9,9,-0,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-9,9,-0,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-9,9,-0,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-9,9,-0,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-9,9,-0,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-9,9,-0,
    -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-9,9;
    Eigen::VectorXd ci0(54);
    ci0 << 3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,3.14159,
        -0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,-0.2762,
        -3.29652,4.26083,4.0404,3.93976,3.92067,4.72057,4.2824,3.64641,3.67239,3.53798,3.68366,4.0742,3.93594,
        11.2965,3.73917,3.9596,4.06024,4.07933,3.27943,3.7176,4.35359,4.32761,4.46202,4.31634,3.9258,4.06406;
    Eigen::VectorXd ans(14);
    std::cout << Eigen::solve_quadprog(G, g0, CE.transpose(), ce0, CI.transpose(), ci0, ans) << std::endl;
    std::cout << ans.transpose() << std::endl;
  return 0;
}
