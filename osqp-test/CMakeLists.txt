cmake_minimum_required(VERSION 3.0)
project(kalman-filter CXX)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++17" COMPILER_SUPPORTS_CXX17)
if (COMPILER_SUPPORTS_CXX17)
    set(CMAKE_CXX_FLAGS "-std=c++17 -Wall -Wextra -Wconversion")
else()
    message(FATAL_ERROR "The compiler you are using does not support C++17.")
endif()
message("Compiler: ${CMAKE_CXX_COMPILER}")

if (CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wconversion -Wswitch-default -Wdisabled-optimization -Wformat -Winit-self -Woverloaded-virtual -Wfloat-equal")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-old-style-cast -Wno-pragmas")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")
message("Build type:\n\t${CMAKE_BUILD_TYPE}")
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message("Compile flags:\n\t${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    message("Compile flags:\n\t${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
else()
    message("Compile flags:\n\t${CMAKE_CXX_FLAGS}")
endif()

find_package(osqp REQUIRED)
find_package(OsqpEigen REQUIRED)

file(GLOB MAIN_SOURCES ${CMAKE_CURRENT_LIST_DIR} *.cpp)
file(GLOB SUB_SOURCES)
set(SUB_SOURCE_DIR)
foreach(source_dir IN LISTS SUB_SOURCE_DIR)
    file(GLOB dir_sources ${CMAKE_CURRENT_LIST_DIR} ${source_dir}/*.cpp)
    set(SUB_SOURCES ${SUB_SOURCES} ${dir_sources})
endforeach()
set(MAIN_SOURCES ${MAIN_SOURCES} ${SUB_SOURCES})
include_directories(${CMAKE_CURRENT_LIST_DIR} SYSTEM ${EIGEN3_INCLUDE_DIRS} )
add_executable(main ${MAIN_SOURCES})
set(REQUIRED_LIBRARIES osqp::osqpstatic OsqpEigen::OsqpEigen ${CMAKE_DL_LIBS})
target_link_libraries(main ${REQUIRED_LIBRARIES})
